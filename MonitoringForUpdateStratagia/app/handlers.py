from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackContext, CallbackQueryHandler
from datetime import datetime, timedelta
from dotenv import load_dotenv
import requests
import logging
import aiohttp
import asyncio
import pytz
import re
import os
from app.monitoring import *
from app.strategy import *
from config.settings import *
from config.logging_config import logger

# –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–µ—Ä—Å–∏–∏
async def check_version(update: Update, context: CallbackContext):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ç–µ–∫—É—â—É—é –≤–µ—Ä—Å–∏—é –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –∏ –≤–µ—Ä—Å–∏—é –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ (GitHub)."""
    logger.info("–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–µ—Ä—Å–∏—é'.")
    # –ü–æ–ª—É—á–∞–µ–º –≤–µ—Ä—Å–∏—é –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
    local_version = extract_version_from_file(LOCAL_FILE_PATH)
    logger.info(f"–õ–æ–∫–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è: {local_version}")
    # –ü–æ–ª—É—á–∞–µ–º –≤–µ—Ä—Å–∏—é —É–¥–∞–ª—ë–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
    remote_version = await check_remote_version()
    # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –≤–µ—Ä—Å–∏–∏
    if local_version == remote_version:
        version_status = "‚úÖ  –û–±–Ω–æ–≤–ª–µ–Ω–∏–π –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ"
    else:
        version_status = f"üì•  –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –Ω–æ–≤–∞—è –≤–µ—Ä—Å–∏—è –Ω–∞ GitHub: {remote_version}"
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    message = f"üóÇÔ∏è –í–µ—Ä—Å–∏—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: {local_version}\n" \
              f"üåê –í–µ—Ä—Å–∏—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ (GitHub): {remote_version}\n" \
              f"{version_status}"
    if update.callback_query:
        await update.callback_query.message.reply_text(message)

async def check_commits(update: Update, context: CallbackContext):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–º–∏—Ç–æ–≤ –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ GitHub."""
    logger.info("–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∫–æ–º–º–∏—Ç—ã'.")
    commits = await get_commits_from_github(REPO_URL)
    # –ï—Å–ª–∏ –∫–æ–º–º–∏—Ç—ã –±—ã–ª–∏ –ø–æ–ª—É—á–µ–Ω—ã
    if commits:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å –¥–∞—Ç–æ–π, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∫–æ–º–º–∏—Ç–æ–≤ –∏ —Å–ø–∏—Å–æ–∫ –∫–æ–º–º–∏—Ç–æ–≤
        header = commits[0]
        commits_message = "\n".join(commits[1:])
        commits_message = f"{header}\n{commits_message}"
    else:
        commits_message = "–ù–µ—Ç –∫–æ–º–º–∏—Ç–æ–≤ –∑–∞ —ç—Ç–æ—Ç –ø–µ—Ä–∏–æ–¥."
    if update.callback_query:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ callback_query
        logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è: {commits_message}")
        await update.callback_query.message.reply_text(commits_message)

async def get_commits_from_github(repo_url):
    """–ü–æ–ª—É—á–∞–µ—Ç –∫–æ–º–º–∏—Ç—ã –∏–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è –Ω–∞ GitHub, —Å–¥–µ–ª–∞–Ω–Ω—ã–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –¥–∞—Ç—É, –∫–æ–≥–¥–∞ –æ–Ω–∏ –±—ã–ª–∏ –≤—ã–ª–æ–∂–µ–Ω—ã."""
    # –§–æ—Ä–º–∏—Ä—É–µ–º URL –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∫ API GitHub
    api_url = f"https://api.github.com/repos/{repo_url}/commits?per_page=100"  # –ü–æ–ª—É—á–∞–µ–º 100 –∫–æ–º–º–∏—Ç–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    async with aiohttp.ClientSession() as session:
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ GitHub API
            async with session.get(api_url) as response:
                response.raise_for_status()  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —É—Å–ø–µ—à–Ω—ã–π —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞
                commits = await response.json()  # –ü–∞—Ä—Å–∏–º JSON –æ—Ç–≤–µ—Ç
                if not commits:
                    return ["–ù–µ—Ç –∫–æ–º–º–∏—Ç–æ–≤ –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏."]
                # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–º–º–∏—Ç—ã –ø–æ –¥–∞—Ç–µ –≤ –ø–æ—Ä—è–¥–∫–µ —É–±—ã–≤–∞–Ω–∏—è
                commits.sort(key=lambda x: x['commit']['author']['date'], reverse=True)
                # –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∫–æ–º–º–∏—Ç–∞
                last_commit_date = datetime.fromisoformat(commits[0]['commit']['author']['date'].replace('Z', '+00:00')).date()
                # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ –∫–æ–º–º–∏—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ —Å–¥–µ–ª–∞–Ω—ã –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å
                filtered_commits = [
                    commit for commit in commits
                    if datetime.fromisoformat(commit['commit']['author']['date'].replace('Z', '+00:00')).date() == last_commit_date
                ]
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ–º–º–∏—Ç–æ–≤ —Å –Ω—É–∂–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
                tz = pytz.timezone(TIMEZONE)
                commit_list = [
                    f"{commit['sha'][:7]} {commit['commit']['message']} at {datetime.fromisoformat(commit['commit']['author']['date'].replace('Z', '+00:00')).astimezone(tz).strftime('%H:%M:%S')}"
                    for commit in filtered_commits
                ]
                if not commit_list:
                    return [f"–ù–µ—Ç –∫–æ–º–º–∏—Ç–æ–≤ –Ω–∞ {last_commit_date}."]
                # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å —ç–º–æ–¥–∑–∏, –¥–∞—Ç–æ–π –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∫–æ–º–º–∏—Ç–æ–≤
                header = f"üìú –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∫–æ–º–º–∏—Ç—ã –æ—Ç {last_commit_date} ({len(filtered_commits)} –∫–æ–º–º–∏—Ç–æ–≤)"
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ —Å–ø–∏—Å–æ–∫ –∫–æ–º–º–∏—Ç–æ–≤
                return [header] + commit_list
        except aiohttp.ClientError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ GitHub API: {e}")
            return ["–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–º–º–∏—Ç–æ–≤."]
        except Exception as e:
            logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
            return ["–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –∫–æ–º–º–∏—Ç–∞—Ö."]