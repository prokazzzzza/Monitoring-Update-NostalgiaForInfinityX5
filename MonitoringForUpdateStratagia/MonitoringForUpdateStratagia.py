from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackContext, CallbackQueryHandler
import os
import requests
import hashlib
import time
import re
from dotenv import load_dotenv
import logging
import aiohttp
import asyncio
import pytz
from datetime import datetime, timedelta

# –ù–∞—Å—Ç—Ä–æ–∏–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
CHAT_ID = os.getenv("CHAT_ID")
FREQTRADE_BOT_TOKEN = os.getenv("FREQTRADE_BOT_TOKEN")
FREQTRADE_CHAT_ID = os.getenv("FREQTRADE_CHAT_ID")

FILE_URL = os.getenv("FILE_URL")
LOCAL_FILE_PATH = os.getenv("LOCAL_FILE_PATH")
CHECK_INTERVAL = int(os.getenv("CHECK_INTERVAL"))
RETRY_LIMIT = int(os.getenv("RETRY_LIMIT"))
RETRY_DELAY = int(os.getenv("RETRY_DELAY"))
REPO_URL = os.getenv("REPO_URL")

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def log_telegram_message(update: Update):
    """–õ–æ–≥–∏—Ä—É–µ—Ç –≤—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram."""
    if update.message:
        logger.info(f"–í—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {update.message.from_user.username} ({update.message.from_user.id}): {update.message.text}")
    elif update.callback_query:
        logger.info(f"–í—Ö–æ–¥—è—â–∏–π callback –æ—Ç {update.callback_query.from_user.username} ({update.callback_query.from_user.id}): {update.callback_query.data}")

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
def send_telegram_message(token, chat_id, message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram –∏ –ª–æ–≥–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç."""
    url = f"https://api.telegram.org/bot{token}/sendMessage"
    payload = {"chat_id": chat_id, "text": message}
    response = requests.post(url, json=payload)
    logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è: {message}")
    logger.info(f"–û—Ç–≤–µ—Ç –æ—Ç Telegram API: {response.text}")
    response.raise_for_status()  # –ï—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –≤—ã–±—Ä–æ—Å–∏—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏–µ

# –ó–∞–º–µ–Ω–∏—Ç—å —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ
async def download_file_with_retries(url, save_path, retries=RETRY_LIMIT, delay=RETRY_DELAY):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏."""
    async with aiohttp.ClientSession() as session:
        for attempt in range(1, retries + 1):
            try:
                logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ {attempt}/{retries} –∑–∞–≥—Ä—É–∑–∫–∏...")
                async with session.get(url) as response:
                    response.raise_for_status()  # –í—ã–∑—ã–≤–∞–µ—Ç –æ—à–∏–±–∫—É –ø—Ä–∏ –Ω–µ—É–¥–∞—á–Ω–æ–º –æ—Ç–≤–µ—Ç–µ
                    with open(save_path, "wb") as f:
                        f.write(await response.read())
                logger.info("–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω.")
                return
            except Exception as e:
                logger.error(f"–ü–æ–ø—ã—Ç–∫–∞ {attempt}/{retries} –Ω–µ —É–¥–∞–ª–∞—Å—å: {e}")
                if attempt < retries:
                    await asyncio.sleep(delay)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π
                else:
                    logger.error("–í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã.")
                    raise

def extract_version_from_line(file_path, line_number=69):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –≤–µ—Ä—Å–∏—é —Ñ–∞–π–ª–∞ –∏–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–∏."""
    if not os.path.exists(file_path):
        return "–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω"
    try:
        with open(file_path, "r", encoding="utf-8") as file:
            lines = file.readlines()
            if len(lines) >= line_number:
                line = lines[line_number - 1].strip()  # –ü–æ–ª—É—á–∞–µ–º 69-—é —Å—Ç—Ä–æ–∫—É
                match = re.search(r'return\s+[\'\"](v[\d.]+)[\'\"]', line)
                return match.group(1) if match else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –≤–µ—Ä—Å–∏—è"
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ –≤–µ—Ä—Å–∏–∏: {e}")
    return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –≤–µ—Ä—Å–∏—è"

async def check_version(update: Update, context: CallbackContext):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ç–µ–∫—É—â—É—é –≤–µ—Ä—Å–∏—é –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –∏ –≤–µ—Ä—Å–∏—é –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ (GitHub)."""
    logger.info("–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–µ—Ä—Å–∏—é'.")
    
    # –ü–æ–ª—É—á–∞–µ–º –≤–µ—Ä—Å–∏—é –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
    local_version = extract_version_from_line(LOCAL_FILE_PATH)
    
    # –õ–æ–≥–∏—Ä—É–µ–º –≤–µ—Ä—Å–∏—é –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
    logger.info(f"–õ–æ–∫–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è: {local_version}")
    
    # –ü–æ–ª—É—á–∞–µ–º –≤–µ—Ä—Å–∏—é —Ñ–∞–π–ª–∞ —Å —Å–µ—Ä–≤–µ—Ä–∞
    try:
        server_file_content = download_file_with_retries(FILE_URL, LOCAL_FILE_PATH, retries=1, delay=0)
        server_version = extract_version_from_line(LOCAL_FILE_PATH)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤–µ—Ä—Å–∏–∏: {e}")
        server_version = "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤–µ—Ä—Å–∏—é —Å —Å–µ—Ä–≤–µ—Ä–∞"
    
    # –õ–æ–≥–∏—Ä—É–µ–º –≤–µ—Ä—Å–∏—é —Å —Å–µ—Ä–≤–µ—Ä–∞
    logger.info(f"–í–µ—Ä—Å–∏—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ: {server_version}")
    
    # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –≤–µ—Ä—Å–∏–∏
    if local_version == server_version:
        version_status = "‚úÖ  –û–±–Ω–æ–≤–ª–µ–Ω–∏–π –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ"
    else:
        version_status = f"üì•  –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –Ω–æ–≤–∞—è –≤–µ—Ä—Å–∏—è –Ω–∞ GitHub: {server_version}"

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram
    message = f"–í–µ—Ä—Å–∏—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: {local_version}\n" \
              f"–í–µ—Ä—Å–∏—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ (GitHub): {server_version}\n" \
              f"{version_status}"

    if update.callback_query:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ callback_query
        logger.info("–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–µ—Ä—Å–∏–∏.")
        await update.callback_query.message.reply_text(message)

async def get_commits_from_github(repo_url):
    """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∫–æ–º–º–∏—Ç—ã –∏–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è –Ω–∞ GitHub."""
    api_url = f"https://api.github.com/repos/{repo_url}/commits?per_page=5"
    response = requests.get(api_url)
    
    if response.status_code == 200:
        commits = response.json()
        return [f"–ö–æ–º–º–∏—Ç: {commit['sha']} - {commit['commit']['message']}" for commit in commits]
    else:
        return ["–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –∫–æ–º–º–∏—Ç–∞—Ö."]

async def check_commits(update: Update, context: CallbackContext):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–º–∏—Ç–æ–≤ –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ GitHub."""
    await log_telegram_message(update)  # –õ–æ–≥–∏—Ä—É–µ–º –≤—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    logger.info("–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∫–æ–º–º–∏—Ç—ã'.")
    commits = await get_commits_from_github(REPO_URL)
    commits_message = "\n".join(commits)
    if update.callback_query:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ callback_query
        logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è: –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∫–æ–º–º–∏—Ç—ã:\n{commits_message}")
        await update.callback_query.message.reply_text(f"–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∫–æ–º–º–∏—Ç—ã:\n{commits_message}")

async def reload_freqtrade(update: Update, context: CallbackContext):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–º–∞–Ω–¥—ã –Ω–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ Freqtrade –≤ –¥—Ä—É–≥–æ–π –±–æ—Ç."""
    await log_telegram_message(update)  # –õ–æ–≥–∏—Ä—É–µ–º –≤—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    logger.info("–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ '–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å Freqtrade'.")
    try:
        send_telegram_message(FREQTRADE_BOT_TOKEN, FREQTRADE_CHAT_ID, "/reload_config")  # –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–º–∞–Ω–¥—ã
        message = "–ö–æ–º–∞–Ω–¥–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ Freqtrade –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞"
        if update.callback_query:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ callback_query
            await update.callback_query.message.reply_text(message)
        logger.info("–ö–æ–º–∞–Ω–¥–∞ –Ω–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ Freqtrade —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–º–∞–Ω–¥—ã –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞: {e}")
        if update.callback_query:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ callback_query
            await update.callback_query.message.reply_text(f"‚ùå  –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—É: {e}")

# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ –≤–µ—Ä—Å–∏–∏ –∑–∞–≥—Ä—É–∑–∫–∏
async def download_file(update: Update, context: CallbackContext):
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≥—Ä—É–∂–∞–µ—Ç —Ñ–∞–π–ª —Å —Å–µ—Ä–≤–µ—Ä–∞, –µ—Å–ª–∏ –≤–µ—Ä—Å–∏—è —É—Å—Ç–∞—Ä–µ–ª–∞."""
    logger.info("–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ '–°–∫–∞—á–∞—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ'.")
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤–µ—Ä—Å–∏—é –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        local_version = extract_version_from_line(LOCAL_FILE_PATH)
        
        # –ü–æ–ª—É—á–∞–µ–º –≤–µ—Ä—Å–∏—é —Ñ–∞–π–ª–∞ —Å —Å–µ—Ä–≤–µ—Ä–∞
        await download_file_with_retries(FILE_URL, LOCAL_FILE_PATH, retries=1, delay=0)  # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞
        server_version = extract_version_from_line(LOCAL_FILE_PATH)
        
        if local_version == server_version:
            # –ï—Å–ª–∏ –≤–µ—Ä—Å–∏–∏ —Å–æ–≤–ø–∞–¥–∞—é—Ç, —É–≤–µ–¥–æ–º–ª—è–µ–º, —á—Ç–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è
            message = f"–í–µ—Ä—Å–∏—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ ({local_version}) –∞–∫—Ç—É–∞–ª—å–Ω–∞. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è."
            if update.callback_query:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ callback_query
                await update.callback_query.message.reply_text(message)
            logger.info("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è. –í–µ—Ä—Å–∏—è –∞–∫—Ç—É–∞–ª—å–Ω–∞.")
        else:
            # –ï—Å–ª–∏ –≤–µ—Ä—Å–∏–∏ —Ä–∞–∑–Ω—ã–µ, –∑–∞–≥—Ä—É–∂–∞–µ–º –Ω–æ–≤—É—é –≤–µ—Ä—Å–∏—é
            await download_file_with_retries(FILE_URL, LOCAL_FILE_PATH)  # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞
            message = f"‚úÖ  –ù–æ–≤–∞—è –≤–µ—Ä—Å–∏—è ({server_version}) —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞!"
            if update.callback_query:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ callback_query
                await update.callback_query.message.reply_text(message)
            logger.info("–ù–æ–≤–∞—è –≤–µ—Ä—Å–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞.")
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")
        if update.callback_query:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ callback_query
            await update.callback_query.message.reply_text(f"‚ùå  –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª: {e}")

def show_start_info():
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å—Ç–∞—Ä—Ç–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–µ—Ä—Å–∏–∏ —Ñ–∞–π–ª–æ–≤ –∏ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏."""
    # –ü–æ–ª—É—á–∞–µ–º –≤–µ—Ä—Å–∏—é –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
    local_version = extract_version_from_line(LOCAL_FILE_PATH)
    
    # –õ–æ–≥–∏—Ä—É–µ–º –≤–µ—Ä—Å–∏—é –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
    logger.info(f"–õ–æ–∫–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è: {local_version}")
    
    # –ü–æ–ª—É—á–∞–µ–º –≤–µ—Ä—Å–∏—é —Ñ–∞–π–ª–∞ —Å —Å–µ—Ä–≤–µ—Ä–∞
    try:
        server_file_content = download_file_with_retries(FILE_URL, LOCAL_FILE_PATH, retries=1, delay=0)
        server_version = extract_version_from_line(LOCAL_FILE_PATH)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤–µ—Ä—Å–∏–∏: {e}")
        server_version = "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤–µ—Ä—Å–∏—é —Å —Å–µ—Ä–≤–µ—Ä–∞"
    
    # –õ–æ–≥–∏—Ä—É–µ–º –≤–µ—Ä—Å–∏—é —Å —Å–µ—Ä–≤–µ—Ä–∞
    logger.info(f"–í–µ—Ä—Å–∏—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ: {server_version}")
    
    # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –≤–µ—Ä—Å–∏–∏
    if local_version == server_version:
        version_status = "‚úÖ  –û–±–Ω–æ–≤–ª–µ–Ω–∏–π –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ"
    else:
        version_status = f"üì•  –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –Ω–æ–≤–∞—è –≤–µ—Ä—Å–∏—è –Ω–∞ GitHub: {server_version}"

    # –í—Ä–µ–º—è —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å —É—á–µ—Ç–æ–º —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞ UTC+3
    tz = pytz.timezone('Europe/Moscow')  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å
    now = datetime.now(tz)  # –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è —Å —á–∞—Å–æ–≤—ã–º –ø–æ—è—Å–æ–º
    next_check_time = now + timedelta(seconds=CHECK_INTERVAL)  # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏

    # –£–±–∏—Ä–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –∑–æ–Ω—É –∏ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã
    next_check_time = next_check_time.replace(microsecond=0, tzinfo=None)   # –£–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∑–æ–Ω–µ
    next_check_time_str = next_check_time.strftime('%d-%m-%Y %H:%M:%S')  # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    start_message = (
        f"üìä  –°—Ç–∞—Ä—Ç–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\n"
        f"üìÇ  –í–µ—Ä—Å–∏—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: {local_version}\n"
        f"üåê  –í–µ—Ä—Å–∏—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ: {server_version}\n"
        f"{version_status}\n"
        f"üïí  –í—Ä–µ–º—è —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏: {next_check_time}\n\n"
        f"/start\n"
    )
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∫–Ω–æ–ø–∫–∏
    keyboard = [
        [InlineKeyboardButton("üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–µ—Ä—Å–∏—é –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞", callback_data='check_version')],
        [InlineKeyboardButton("üì• –°–∫–∞—á–∞—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ", callback_data='download_file')],
        [InlineKeyboardButton("üìú –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∫–æ–º–º–∏—Ç—ã", callback_data='check_commits')],
        [InlineKeyboardButton("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å Freqtrade", callback_data='reload_freqtrade')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram
    send_telegram_message(TELEGRAM_TOKEN, CHAT_ID, start_message)
    
    # –ü–µ—á–∞—Ç–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –∫–æ–Ω—Å–æ–ª—å
    logger.info(start_message)

async def start(update: Update, context: CallbackContext):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Ç–∞—Ä—Ç–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏–π."""
    await log_telegram_message(update)  # –õ–æ–≥–∏—Ä—É–µ–º –≤—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    logger.info("–ë–æ—Ç –ø–æ–ª—É—á–∏–ª –∫–æ–º–∞–Ω–¥—É /start")

    # –ü–æ–ª—É—á–∞–µ–º –≤–µ—Ä—Å–∏—é –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
    local_version = extract_version_from_line(LOCAL_FILE_PATH)
    
    # –õ–æ–≥–∏—Ä—É–µ–º –≤–µ—Ä—Å–∏—é –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
    logger.info(f"–õ–æ–∫–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è: {local_version}")
    
    # –ü–æ–ª—É—á–∞–µ–º –≤–µ—Ä—Å–∏—é —Ñ–∞–π–ª–∞ —Å —Å–µ—Ä–≤–µ—Ä–∞
    try:
        server_file_content = download_file_with_retries(FILE_URL, LOCAL_FILE_PATH, retries=1, delay=0)
        server_version = extract_version_from_line(LOCAL_FILE_PATH)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤–µ—Ä—Å–∏–∏: {e}")
        server_version = "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤–µ—Ä—Å–∏—é —Å —Å–µ—Ä–≤–µ—Ä–∞"
    
    # –õ–æ–≥–∏—Ä—É–µ–º –≤–µ—Ä—Å–∏—é —Å —Å–µ—Ä–≤–µ—Ä–∞
    logger.info(f"–í–µ—Ä—Å–∏—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ: {server_version}")
    
    # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –≤–µ—Ä—Å–∏–∏
    if local_version == server_version:
        version_status = "‚úÖ  –û–±–Ω–æ–≤–ª–µ–Ω–∏–π –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ"
    else:
        version_status = f"üì• –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –Ω–æ–≤–∞—è –≤–µ—Ä—Å–∏—è –Ω–∞ GitHub: {server_version}"

    # –í—Ä–µ–º—è —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
    next_check_time = time.strftime('%Y-%m-%d %H:%M:%S', time.localtime(time.time() + CHECK_INTERVAL))
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    start_message = (
        f"üìä  –°—Ç–∞—Ä—Ç–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\n"
        f"üìÇ  –í–µ—Ä—Å–∏—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: {local_version}\n"
        f"üåê  –í–µ—Ä—Å–∏—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ: {server_version}\n"
        f"{version_status}\n"
        f"üïí  –í—Ä–µ–º—è —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏: {next_check_time}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∫–Ω–æ–ø–∫–∏
    keyboard = [
        [InlineKeyboardButton("üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–µ—Ä—Å–∏—é –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞", callback_data='check_version')],
        [InlineKeyboardButton("üì• –°–∫–∞—á–∞—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ", callback_data='download_file')],
        [InlineKeyboardButton("üìú –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∫–æ–º–º–∏—Ç—ã", callback_data='check_commits')],
        [InlineKeyboardButton("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å Freqtrade", callback_data='reload_freqtrade')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    if update.message:
        await update.message.reply_text(start_message, reply_markup=reply_markup)

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞."""
    # –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ä—Ç–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Å—Ä–∞–∑—É –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    show_start_info()

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    application = Application.builder().token(TELEGRAM_TOKEN).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(check_version, pattern='check_version'))
    application.add_handler(CallbackQueryHandler(download_file, pattern='download_file'))
    application.add_handler(CallbackQueryHandler(check_commits, pattern='check_commits'))
    application.add_handler(CallbackQueryHandler(reload_freqtrade, pattern='reload_freqtrade'))

    application.run_polling()

if __name__ == '__main__':
    main()